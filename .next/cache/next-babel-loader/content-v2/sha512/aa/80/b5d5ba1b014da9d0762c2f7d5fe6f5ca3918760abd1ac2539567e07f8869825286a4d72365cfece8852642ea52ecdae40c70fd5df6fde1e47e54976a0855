{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/david/\\xC1rea de Trabalho/repositories/nlw5-ReactJs/src/contexts/PlayerContext.tsx\";\nimport { createContext, useState, useContext } from 'react';\nexport const PlayerContext = /*#__PURE__*/createContext({});\nexport function PlayerContextProvider({\n  children\n}) {\n  const {\n    0: episodeList,\n    1: setEpisodeList\n  } = useState([]);\n  const {\n    0: currentEpisodeIndex,\n    1: setCurrentEpisodeIndex\n  } = useState(0);\n  const {\n    0: isPlaying,\n    1: setIsPlaying\n  } = useState(false);\n  const {\n    0: isLooping,\n    1: setIsLooping\n  } = useState(false);\n  const {\n    0: isShuffling,\n    1: setIsShuffling\n  } = useState(false);\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function playList(list, index) {\n    setEpisodeList(list);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function toggleLoop() {\n    setIsLooping(!isLooping);\n  }\n\n  function toggleShoffling() {\n    setIsShuffling(!isShuffling);\n  }\n\n  function setPlayingState(state) {\n    setIsPlaying(state);\n  }\n\n  const hasPrevius = currentEpisodeIndex > 0;\n  const hasNext = isShuffling || currentEpisodeIndex + 1 < episodeList.length;\n\n  function playNext() {\n    if (isShuffling) {\n      const nextRandomEpisodeIndex = Math.floor(Math.random() * episodeList.length);\n      setCurrentEpisodeIndex(nextRandomEpisodeIndex);\n    } else if (hasNext) {\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevius() {\n    if (hasPrevius) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n  function clearPLayerState() {\n    setEpisodeList([]);\n    setCurrentEpisodeIndex(0);\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList,\n      currentEpisodeIndex,\n      play,\n      playList,\n      playNext,\n      playPrevius,\n      isPlaying,\n      togglePlay,\n      isLooping,\n      toggleLoop,\n      setPlayingState,\n      hasNext,\n      hasPrevius,\n      isShuffling,\n      toggleShoffling,\n      clearPLayerState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n}\nexport const userPlayer = () => {\n  return useContext(PlayerContext);\n};","map":{"version":3,"sources":["/home/david/Área de Trabalho/repositories/nlw5-ReactJs/src/contexts/PlayerContext.tsx"],"names":["createContext","useState","useContext","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeIndex","isPlaying","setIsPlaying","isLooping","setIsLooping","isShuffling","setIsShuffling","play","episode","playList","list","index","togglePlay","toggleLoop","toggleShoffling","setPlayingState","state","hasPrevius","hasNext","length","playNext","nextRandomEpisodeIndex","Math","floor","random","playPrevius","clearPLayerState","userPlayer"],"mappings":"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","sourcesContent":["import { createContext, useState, ReactNode, useContext } from 'react';\n\ntype Episode = {\n    title: string;\n    members: string;\n    thumbnail: string;\n    duration: number;\n    url: string;\n}\n\ntype PlayerContextData = {\n    episodeList: Episode[];\n    currentEpisodeIndex: number;\n    isPlaying: boolean;\n    play: (episode: Episode) => void;\n    playList: (list: Episode[], index: number) => void;\n    playNext: () => void;\n    playPrevius: () => void;\n    togglePlay: () => void;\n    setPlayingState: (state: boolean) => void;\n    hasNext: boolean;\n    hasPrevius: boolean;\n    isLooping: boolean;\n    toggleLoop: () => void;\n    isShuffling: boolean;\n    toggleShoffling: () => void;\n    clearPLayerState: () => void;\n}\n\nexport const PlayerContext = createContext({} as PlayerContextData);\n\ntype PlayerContextProviderProps = {\n    children: ReactNode;\n}\n\nexport function PlayerContextProvider({ children }: PlayerContextProviderProps){\n    const [episodeList, setEpisodeList] = useState([])\n    const [currentEpisodeIndex, setCurrentEpisodeIndex] = useState(0)\n    const [isPlaying, setIsPlaying] = useState(false)\n    const [isLooping, setIsLooping] = useState(false)\n    const [isShuffling, setIsShuffling] = useState(false)\n  \n    function play(episode: Episode){\n      setEpisodeList([episode]);\n      setCurrentEpisodeIndex(0);\n      setIsPlaying(true);\n    }\n  \n    function playList(list: Episode[], index: number){\n        setEpisodeList(list);\n        setCurrentEpisodeIndex(index);\n        setIsPlaying(true)\n    }\n\n    function togglePlay(){\n      setIsPlaying(!isPlaying);\n    }\n  \n    function toggleLoop(){\n        setIsLooping(!isLooping);\n    }\n\n    function toggleShoffling(){\n        setIsShuffling(!isShuffling)\n    }\n\n    function setPlayingState(state: boolean){\n      setIsPlaying(state)\n    }\n\n    const hasPrevius = currentEpisodeIndex > 0;\n    const hasNext = isShuffling || (currentEpisodeIndex + 1) < episodeList.length;\n\n    function playNext(){\n        if(isShuffling){\n            const nextRandomEpisodeIndex = Math.floor(Math.random() * episodeList.length)\n            \n            setCurrentEpisodeIndex(nextRandomEpisodeIndex)\n        }else if(hasNext){\n            setCurrentEpisodeIndex(currentEpisodeIndex + 1)\n        }        \n    }\n\n    function playPrevius(){\n        if(hasPrevius){\n            setCurrentEpisodeIndex(currentEpisodeIndex - 1)\n        }    \n    }\n\n    function clearPLayerState(){\n        setEpisodeList([])\n        setCurrentEpisodeIndex(0)\n    }\n\n    return (\n        <PlayerContext.Provider \n            value={{ \n                episodeList, \n                currentEpisodeIndex, \n                play,\n                playList,\n                playNext,\n                playPrevius, \n                isPlaying,                 \n                togglePlay,\n                isLooping,\n                toggleLoop, \n                setPlayingState,\n                hasNext,\n                hasPrevius,\n                isShuffling,\n                toggleShoffling,\n                clearPLayerState\n            }}\n        > \n            { children }\n        </PlayerContext.Provider>\n    )\n}\n\nexport const userPlayer = () =>{\n    return useContext(PlayerContext)\n}"]},"metadata":{},"sourceType":"module"}