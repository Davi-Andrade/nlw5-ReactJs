{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/david/\\xC1rea de Trabalho/repositories/nlw5-ReactJs/src/contexts/PlayerContext.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useState, useContext } from 'react';\nexport var PlayerContext = /*#__PURE__*/createContext({});\nexport function PlayerContextProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState([]),\n      episodeList = _useState[0],\n      setEpisodeList = _useState[1];\n\n  var _useState2 = useState(0),\n      currentEpisodeIndex = _useState2[0],\n      setCurrentEpisodeIndex = _useState2[1];\n\n  var _useState3 = useState(false),\n      isPlaying = _useState3[0],\n      setIsPlaying = _useState3[1];\n\n  var _useState4 = useState(false),\n      isLooping = _useState4[0],\n      setIsLooping = _useState4[1];\n\n  var _useState5 = useState(false),\n      isShuffling = _useState5[0],\n      setIsShuffling = _useState5[1];\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function playList(list, index) {\n    setEpisodeList(list);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function toggleLoop() {\n    setIsLooping(!isLooping);\n  }\n\n  function toggleShoffling() {\n    setIsShuffling(!isShuffling);\n  }\n\n  function setPlayingState(state) {\n    setIsPlaying(state);\n  }\n\n  var hasPrevius = currentEpisodeIndex > 0;\n  var hasNext = isShuffling || currentEpisodeIndex + 1 < episodeList.length;\n\n  function playNext() {\n    if (isShuffling) {\n      var nextRandomEpisodeIndex = Math.floor(Math.random() * episodeList.length);\n      setCurrentEpisodeIndex(nextRandomEpisodeIndex);\n    } else if (hasNext) {\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevius() {\n    if (hasPrevius) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n  function clearPLayerState() {\n    setEpisodeList([]);\n    setCurrentEpisodeIndex(0);\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList: episodeList,\n      currentEpisodeIndex: currentEpisodeIndex,\n      play: play,\n      playList: playList,\n      playNext: playNext,\n      playPrevius: playPrevius,\n      isPlaying: isPlaying,\n      togglePlay: togglePlay,\n      isLooping: isLooping,\n      toggleLoop: toggleLoop,\n      setPlayingState: setPlayingState,\n      hasNext: hasNext,\n      hasPrevius: hasPrevius,\n      isShuffling: isShuffling,\n      toggleShoffling: toggleShoffling,\n      clearPLayerState: clearPLayerState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PlayerContextProvider, \"YSXWY8OfLfVxd5To+FHcHi+GAY0=\");\n\n_c = PlayerContextProvider;\nexport var userPlayer = function userPlayer() {\n  _s2();\n\n  return useContext(PlayerContext);\n};\n\n_s2(userPlayer, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayerContextProvider\");","map":{"version":3,"sources":["/home/david/Área de Trabalho/repositories/nlw5-ReactJs/src/contexts/PlayerContext.tsx"],"names":["createContext","useState","useContext","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeIndex","isPlaying","setIsPlaying","isLooping","setIsLooping","isShuffling","setIsShuffling","play","episode","playList","list","index","togglePlay","toggleLoop","toggleShoffling","setPlayingState","state","hasPrevius","hasNext","length","playNext","nextRandomEpisodeIndex","Math","floor","random","playPrevius","clearPLayerState","userPlayer"],"mappings":"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","sourcesContent":["import { createContext, useState, ReactNode, useContext } from 'react';\n\ntype Episode = {\n    title: string;\n    members: string;\n    thumbnail: string;\n    duration: number;\n    url: string;\n}\n\ntype PlayerContextData = {\n    episodeList: Episode[];\n    currentEpisodeIndex: number;\n    isPlaying: boolean;\n    play: (episode: Episode) => void;\n    playList: (list: Episode[], index: number) => void;\n    playNext: () => void;\n    playPrevius: () => void;\n    togglePlay: () => void;\n    setPlayingState: (state: boolean) => void;\n    hasNext: boolean;\n    hasPrevius: boolean;\n    isLooping: boolean;\n    toggleLoop: () => void;\n    isShuffling: boolean;\n    toggleShoffling: () => void;\n    clearPLayerState: () => void;\n}\n\nexport const PlayerContext = createContext({} as PlayerContextData);\n\ntype PlayerContextProviderProps = {\n    children: ReactNode;\n}\n\nexport function PlayerContextProvider({ children }: PlayerContextProviderProps){\n    const [episodeList, setEpisodeList] = useState([])\n    const [currentEpisodeIndex, setCurrentEpisodeIndex] = useState(0)\n    const [isPlaying, setIsPlaying] = useState(false)\n    const [isLooping, setIsLooping] = useState(false)\n    const [isShuffling, setIsShuffling] = useState(false)\n  \n    function play(episode: Episode){\n      setEpisodeList([episode]);\n      setCurrentEpisodeIndex(0);\n      setIsPlaying(true);\n    }\n  \n    function playList(list: Episode[], index: number){\n        setEpisodeList(list);\n        setCurrentEpisodeIndex(index);\n        setIsPlaying(true)\n    }\n\n    function togglePlay(){\n      setIsPlaying(!isPlaying);\n    }\n  \n    function toggleLoop(){\n        setIsLooping(!isLooping);\n    }\n\n    function toggleShoffling(){\n        setIsShuffling(!isShuffling)\n    }\n\n    function setPlayingState(state: boolean){\n      setIsPlaying(state)\n    }\n\n    const hasPrevius = currentEpisodeIndex > 0;\n    const hasNext = isShuffling || (currentEpisodeIndex + 1) < episodeList.length;\n\n    function playNext(){\n        if(isShuffling){\n            const nextRandomEpisodeIndex = Math.floor(Math.random() * episodeList.length)\n            \n            setCurrentEpisodeIndex(nextRandomEpisodeIndex)\n        }else if(hasNext){\n            setCurrentEpisodeIndex(currentEpisodeIndex + 1)\n        }        \n    }\n\n    function playPrevius(){\n        if(hasPrevius){\n            setCurrentEpisodeIndex(currentEpisodeIndex - 1)\n        }    \n    }\n\n    function clearPLayerState(){\n        setEpisodeList([])\n        setCurrentEpisodeIndex(0)\n    }\n\n    return (\n        <PlayerContext.Provider \n            value={{ \n                episodeList, \n                currentEpisodeIndex, \n                play,\n                playList,\n                playNext,\n                playPrevius, \n                isPlaying,                 \n                togglePlay,\n                isLooping,\n                toggleLoop, \n                setPlayingState,\n                hasNext,\n                hasPrevius,\n                isShuffling,\n                toggleShoffling,\n                clearPLayerState\n            }}\n        > \n            { children }\n        </PlayerContext.Provider>\n    )\n}\n\nexport const userPlayer = () =>{\n    return useContext(PlayerContext)\n}"]},"metadata":{},"sourceType":"module"}